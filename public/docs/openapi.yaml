openapi: 3.0.3
info:
    title: 'OnesBlog API Documentation'
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://ones-blog-api.test'
paths:
    /api/register:
        post:
            summary: 'Register a user with a personal access token for the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when registration succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' }
                                properties:
                                    data: { type: object, example: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: ['{validation-error-message}'], email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { name: ['{validation-error-message}'], email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] } }
            tags:
                - '01. Authentication and Users'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the user.'
                                    example: Han
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: han@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '123456'
                                device_name:
                                    type: string
                                    description: 'The device name of the user.'
                                    example: iPhone
                            required:
                                - name
                                - email
                                - password
                                - device_name
            security: []
    /api/verifyCode:
        post:
            summary: 'Verify a user with a code.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when verify succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' }
                                properties:
                                    data: { type: object, example: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' } }
                422:
                    description: '422, when verify incorrect.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { email: ['{validation-error-message}'], code: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { email: ['{validation-error-message}'], code: ['{validation-error-message}'] } }
            tags:
                - '01. Authentication and Users'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: hanTest@gmail.com
                                code:
                                    type: string
                                    description: 'The code of the user.'
                                    example: VYB6P9
                            required:
                                - email
                                - code
            security: []
    /api/login:
        post:
            summary: 'Login a user with a new personal access token for the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when login succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' }
                                properties:
                                    data: { type: object, example: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] } }
            tags:
                - '01. Authentication and Users'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: han@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '123456'
                                device_name:
                                    type: string
                                    description: 'The device name of the user.'
                                    example: iPhone
                            required:
                                - email
                                - password
                                - device_name
            security: []
    '/api/users/{user}':
        put:
            summary: 'Update the specified user in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when user''s information updated.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: '{user-name}', email: '{user-email}', token: '{user-token}' }
                                properties:
                                    data: { type: object, example: { name: '{user-name}', email: '{user-email}', token: '{user-token}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when user not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'User(ID:{user-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'User(ID:{user-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { email: ['{validation-error-message}'], password: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { email: ['{validation-error-message}'], password: ['{validation-error-message}'] } }
            tags:
                - '01. Authentication and Users'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the user.'
                                    example: Han
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: han@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '1234567890'
        parameters:
            -
                in: path
                name: user
                description: 'The id of the user.'
                example: 34
                required: true
                schema:
                    type: integer
    /api/logout:
        post:
            summary: 'Logout a user with all the personal access tokens being revoked on the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when logout succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' }
                                properties:
                                    data: { type: object, example: { name: '{user-name}', email: '{user-email}', token: '{personal-access-token}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
            tags:
                - '01. Authentication and Users'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                device_name:
                                    type: string
                                    description: 'The device''s name of the user.'
                                    example: iPhone
                            required:
                                - device_name
    /api/locations:
        get:
            summary: 'Display a listing of the locations.'
            description: ''
            parameters:
                -
                    in: query
                    name: category_id
                    description: 'The id of the category.'
                    example: 2
                    required: false
                    schema:
                        type: integer
                        description: 'The id of the category.'
                        example: 2
                -
                    in: query
                    name: city_id
                    description: 'The id of the city.'
                    example: 11
                    required: false
                    schema:
                        type: integer
                        description: 'The id of the city.'
                        example: 11
                -
                    in: query
                    name: random
                    description: 'Whether the results are in random order or not.'
                    example: true
                    required: false
                    schema:
                        type: boolean
                        description: 'Whether the results are in random order or not.'
                        example: true
                -
                    in: query
                    name: ranking
                    description: 'The top amount of the results.'
                    example: 6
                    required: false
                    schema:
                        type: integer
                        description: 'The top amount of the results.'
                        example: 6
                -
                    in: query
                    name: limit
                    description: 'The amount of results per page. Defaults to ''10''.'
                    example: 10
                    required: false
                    schema:
                        type: integer
                        description: 'The amount of results per page. Defaults to ''10''.'
                        example: 10
                -
                    in: query
                    name: page
                    description: 'The page of the results. Defaults to ''1''.'
                    example: 1
                    required: false
                    schema:
                        type: integer
                        description: 'The page of the results. Defaults to ''1''.'
                        example: 1
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when locations displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' }]
                                    links: { first: 'http://ones-blog-api.test/api/locations?category_id=1&city_id=11&page=1', last: 'http://ones-blog-api.test/api/locations?category_id=1&city_id=11&page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/locations?category_id=1&city_id=11&page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/locations', per_page: 10, to: 1, total: 1 }
                                properties:
                                    data: { type: array, example: [{ user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://ones-blog-api.test/api/locations?category_id=1&city_id=11&page=1', last: 'http://ones-blog-api.test/api/locations?category_id=1&city_id=11&page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/locations?category_id=1&city_id=11&page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/locations', per_page: 10, to: 1, total: 1 } }
            tags:
                - '02. Locations'
            security: []
        post:
            summary: 'Store a newly created location in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when location created.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' }
                                properties:
                                    data: { type: object, example: { user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { city_area_id: ['{validation-error-message}'], category_id: ['{validation-error-message}'], name: ['{validation-error-message}'], address: ['{validation-error-message}'], phone: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { city_area_id: ['{validation-error-message}'], category_id: ['{validation-error-message}'], name: ['{validation-error-message}'], address: ['{validation-error-message}'], phone: ['{validation-error-message}'] } }
            tags:
                - '02. Locations'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                city_area_id:
                                    type: integer
                                    description: 'The city area of the location.'
                                    example: 153
                                category_id:
                                    type: integer
                                    description: 'The category of the location.'
                                    example: 2
                                name:
                                    type: string
                                    description: 'The name of the location.'
                                    example: 新亞洲汽車
                                address:
                                    type: string
                                    description: 'The address of the location.'
                                    example: 賢好街四段43巷434號75樓
                                phone:
                                    type: string
                                    description: 'The phone of the location.'
                                    example: '9110576179'
                                introduction:
                                    type: string
                                    description: 'The introduction of the location.'
                                    example: Introduction
                                images:
                                    type: array
                                    description: 'The images of the location.'
                                    example: [null, null]
                                    items: { type: file }
                            required:
                                - city_area_id
                                - category_id
                                - name
                                - address
                                - phone
    '/api/locations/{location}':
        get:
            summary: 'Display the specified location.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when location displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' }
                                properties:
                                    data: { type: object, example: { user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' } }
                404:
                    description: '404, when location not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Location(ID:{location-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Location(ID:{location-id}) is not found.' }
            tags:
                - '02. Locations'
            security: []
        put:
            summary: 'Update the specified location in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when location displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' }
                                properties:
                                    data: { type: object, example: { user_id: '{user-id}', city_area_id: '{city-area-id}', category_id: '{category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                403:
                    description: '403, when location updated by wrong user.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'This action is unauthorized.'
                                properties:
                                    data: { type: string, example: 'This action is unauthorized.' }
                404:
                    description: '404, when location not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Location(ID:{location-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Location(ID:{location-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { city_area_id: ['{validation-error-message}'], category_id: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { city_area_id: ['{validation-error-message}'], category_id: ['{validation-error-message}'] } }
            tags:
                - '02. Locations'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                city_area_id:
                                    type: integer
                                    description: 'The city area of the location.'
                                    example: 153
                                category_id:
                                    type: integer
                                    description: 'The category of the location.'
                                    example: 2
                                name:
                                    type: string
                                    description: 'The name of the location.'
                                    example: 統一娛樂
                                address:
                                    type: string
                                    description: 'The address of the location.'
                                    example: 豐裡二路180巷804弄601號49樓
                                phone:
                                    type: string
                                    description: 'The phone of the location.'
                                    example: '1335933680'
                                introduction:
                                    type: string
                                    description: 'The introduction of the location.'
                                    example: IntroductionTest
                                images:
                                    type: array
                                    description: 'The images of the location.'
                                    example: [null, null]
                                    items: { type: file }
                                _method:
                                    type: string
                                    description: 'Required if the <code><b>images</b></code> of the location are uploaded, must be <b>PUT</b> and request method must be <small class="badge badge-black">POST</small>.'
                                    example: PUT
                            required:
                                - city_area_id
                                - category_id
                                - name
                                - address
                                - phone
        delete:
            summary: 'Remove the specified location from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when location deleted.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Success
                                properties:
                                    data: { type: string, example: Success }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                403:
                    description: '403, when location deleted by wrong user.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'This action is unauthorized.'
                                properties:
                                    data: { type: string, example: 'This action is unauthorized.' }
                404:
                    description: '404, when location not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Location(ID:{location-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Location(ID:{location-id}) is not found.' }
            tags:
                - '02. Locations'
        parameters:
            -
                in: path
                name: location
                description: 'The id of the location.'
                example: 5
                required: true
                schema:
                    type: integer
    /api/location-scores:
        get:
            summary: 'Display a listing of the location scores.'
            description: ''
            parameters:
                -
                    in: query
                    name: location_id
                    description: 'The id of the location.'
                    example: 3
                    required: false
                    schema:
                        type: integer
                        description: 'The id of the location.'
                        example: 3
                -
                    in: query
                    name: user_id
                    description: 'The id of the user.'
                    example: 31
                    required: false
                    schema:
                        type: integer
                        description: 'The id of the user.'
                        example: 31
                -
                    in: query
                    name: limit
                    description: 'The amount of results per page. Defaults to ''10''.'
                    example: 10
                    required: false
                    schema:
                        type: integer
                        description: 'The amount of results per page. Defaults to ''10''.'
                        example: 10
                -
                    in: query
                    name: page
                    description: 'The page of the results. Defaults to ''1''.'
                    example: 1
                    required: false
                    schema:
                        type: integer
                        description: 'The page of the results. Defaults to ''1''.'
                        example: 1
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when location scores displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ user_id: '{user-id}', location_id: '{location-id}', score: '{location-score}' }]
                                properties:
                                    data: { type: array, example: [{ user_id: '{user-id}', location_id: '{location-id}', score: '{location-score}' }], items: { type: object } }
            tags:
                - '03. LocationScores'
            security: []
    '/api/locations/{location}/location-scores':
        post:
            summary: 'Store a newly created or update the specified location score in storage, or remove the specified location score from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when location score created, updated or deleted.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: '{user-id}', location_id: '{location-id}', score: '{user-location-score}' }
                                properties:
                                    data: { type: object, example: { user_id: '{user-id}', location_id: '{location-id}', score: '{user-location-score}' } }
                404:
                    description: '404, when location not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Location(ID:{location-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Location(ID:{location-id}) is not found.' }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { score: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { score: ['{validation-error-message}'] } }
            tags:
                - '03. LocationScores'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                score:
                                    type: number
                                    description: 'The location score of the location, <b>0</b> for deleting.'
                                    example: 3.8
                            required:
                                - score
        parameters:
            -
                in: path
                name: location
                description: ''
                example: et
                required: true
                schema:
                    type: string
    /api/posts:
        get:
            summary: 'Display a listing of the posts.'
            description: ''
            parameters:
                -
                    in: query
                    name: category_id
                    description: 'The id of the category.'
                    example: 2
                    required: false
                    schema:
                        type: integer
                        description: 'The id of the category.'
                        example: 2
                -
                    in: query
                    name: limit
                    description: 'The amount of results per page. Defaults to ''10''.'
                    example: 10
                    required: false
                    schema:
                        type: integer
                        description: 'The amount of results per page. Defaults to ''10''.'
                        example: 10
                -
                    in: query
                    name: page
                    description: 'The page of the results. Defaults to ''1''.'
                    example: 1
                    required: false
                    schema:
                        type: integer
                        description: 'The page of the results. Defaults to ''1''.'
                        example: 1
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when posts displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ user_id: '{user-id}', city_area_id: '{location-city-area-id}', category_id: '{location-category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' }]
                                    links: { first: 'http://ones-blog-api.test/api/locations?category_id=1&cuty=5&page=1', last: 'http://ones-blog-api.test/api/locations?category_id=1&cuty=5&page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/locations?category_id=1&cuty=5&page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/locations', per_page: 10, to: 1, total: 1 }
                                properties:
                                    data: { type: array, example: [{ user_id: '{user-id}', city_area_id: '{location-city-area-id}', category_id: '{location-category-id}', name: '{location-name}', address: '{location-address}', phone: '{location-phone}', avgScore: '{location-avgScore}', introduction: '{location-introduction}' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://ones-blog-api.test/api/locations?category_id=1&cuty=5&page=1', last: 'http://ones-blog-api.test/api/locations?category_id=1&cuty=5&page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/locations?category_id=1&cuty=5&page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/locations', per_page: 10, to: 1, total: 1 } }
            tags:
                - '04. Posts'
            security: []
        post:
            summary: 'Store a newly created post in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when post created.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { created_at: '{post-created-at}', user: { id: '{user-id}', created_at: '{user-created-at}', updated_at: '{user-updated-at}', name: '{user-name}', email: '{user-email}', email_verified_at: '{user-email-verified-at}', login_type_id: '{user-login-type-id}' }, location_id: '{post-location_id}', title: '{post-title}', content: '{post-content}', published_at: '{post-published-at}', slug: '{post-slug}' }
                                properties:
                                    data: { type: object, example: { created_at: '{post-created-at}', user: { id: '{user-id}', created_at: '{user-created-at}', updated_at: '{user-updated-at}', name: '{user-name}', email: '{user-email}', email_verified_at: '{user-email-verified-at}', login_type_id: '{user-login-type-id}' }, location_id: '{post-location_id}', title: '{post-title}', content: '{post-content}', published_at: '{post-published-at}', slug: '{post-slug}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { location_id: ['{validation-error-message}'], title: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { location_id: ['{validation-error-message}'], title: ['{validation-error-message}'] } }
            tags:
                - '04. Posts'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                location_id:
                                    type: integer
                                    description: 'The location of the post.'
                                    example: 6
                                title:
                                    type: string
                                    description: 'The title of the post.'
                                    example: Post
                                content:
                                    type: string
                                    description: 'The content of the post.'
                                    example: Test
                                published_at:
                                    type: string
                                    description: 'The published time of the post.'
                                    example: '2022-07-23T08:31:45.000000Z'
                                active:
                                    type: boolean
                                    description: 'The state of the post.'
                                    example: true
                                images:
                                    type: array
                                    description: 'The images of the post.'
                                    example: [null, null]
                                    items: { type: file }
                            required:
                                - location_id
                                - title
    '/api/posts/{post}':
        get:
            summary: 'Display the specified post.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when post displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { created_at: '{post-created-at}', user: { id: '{user-id}', created_at: '{user-created-at}', updated_at: '{user-updated-at}', name: '{user-name}', email: '{user-email}', email_verified_at: '{user-email-verified-at}', login_type_id: '{user-login-type-id}' }, location_id: '{post-location-id}', title: '{post-title}', content: '{post-content}', published_at: '{post-published-at}', slug: '{post-slug}' }
                                properties:
                                    data: { type: object, example: { created_at: '{post-created-at}', user: { id: '{user-id}', created_at: '{user-created-at}', updated_at: '{user-updated-at}', name: '{user-name}', email: '{user-email}', email_verified_at: '{user-email-verified-at}', login_type_id: '{user-login-type-id}' }, location_id: '{post-location-id}', title: '{post-title}', content: '{post-content}', published_at: '{post-published-at}', slug: '{post-slug}' } }
                404:
                    description: '404, when post not found, inactive or unpublished.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
            tags:
                - '04. Posts'
            security: []
        put:
            summary: 'Update the specified post in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when post updated.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { created_at: '{post-created-at}', user: { id: '{user-id}', created_at: '{user-created-at}', updated_at: '{user-updated-at}', name: '{user-name}', email: '{user-email}', email_verified_at: '{user-email-verified-at}', login_type_id: '{user-login-type-id}' }, location_id: '{post-location-id}', title: '{post-title}', content: '{post-content}', published_at: '{post-published-at}', slug: '{post-slug}' }
                                properties:
                                    data: { type: object, example: { created_at: '{post-created-at}', user: { id: '{user-id}', created_at: '{user-created-at}', updated_at: '{user-updated-at}', name: '{user-name}', email: '{user-email}', email_verified_at: '{user-email-verified-at}', login_type_id: '{user-login-type-id}' }, location_id: '{post-location-id}', title: '{post-title}', content: '{post-content}', published_at: '{post-published-at}', slug: '{post-slug}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when post not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { title: ['{validation-error-message}'], published_at: ['{validation-error-message}'], active: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { title: ['{validation-error-message}'], published_at: ['{validation-error-message}'], active: ['{validation-error-message}'] } }
            tags:
                - '04. Posts'
            requestBody:
                required: false
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                title:
                                    type: string
                                    description: 'The title of the post.'
                                    example: 0724Post
                                content:
                                    type: string
                                    description: 'The content of the post.'
                                    example: 0724Test
                                published_at:
                                    type: string
                                    description: 'The published time of the post.'
                                    example: '20220724'
                                active:
                                    type: boolean
                                    description: 'The state of the post.'
                                    example: true
                                images:
                                    type: array
                                    description: 'The images of the post.'
                                    example: [null, null]
                                    items: { type: file }
                                _method:
                                    type: string
                                    description: 'Required if the <code><b>images</b></code> of the post are uploaded, must be <b>PUT</b> and request method must be <small class="badge badge-black">POST</small>.'
                                    example: PUT
        delete:
            summary: 'Remove the specified post from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when post deleted.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Success
                                properties:
                                    data: { type: string, example: Success }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when post not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
            tags:
                - '04. Posts'
        parameters:
            -
                in: path
                name: post
                description: 'The id of the post.'
                example: 108
                required: true
                schema:
                    type: integer
    '/api/posts/{post}/comments':
        get:
            summary: 'Display a listing of the comments.'
            description: ''
            parameters:
                -
                    in: query
                    name: limit
                    description: 'The amount of results per page.'
                    example: 10
                    required: false
                    schema:
                        type: integer
                        description: 'The amount of results per page.'
                        example: 10
                -
                    in: query
                    name: page
                    description: 'The page of the results.'
                    example: 1
                    required: false
                    schema:
                        type: integer
                        description: 'The page of the results.'
                        example: 1
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comments displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ user_id: '{user-id}', post_id: '{post-id}', content: '{content}' }]
                                    links: { first: 'http://ones-blog-api.test/api/posts/109/comments?page=1', last: 'http://ones-blog-api.test/api/posts/109/comments?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/posts/109/comments?page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/posts/109/comments', per_page: 10, to: 1, total: 1 }
                                properties:
                                    data: { type: array, example: [{ user_id: '{user-id}', post_id: '{post-id}', content: '{content}' }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://ones-blog-api.test/api/posts/109/comments?page=1', last: 'http://ones-blog-api.test/api/posts/109/comments?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/posts/109/comments?page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/posts/109/comments', per_page: 10, to: 1, total: 1 } }
            tags:
                - '05. Comments'
            security: []
        post:
            summary: 'Store a newly created comment in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when comment created.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: '{user-id}', post_id: '{post-id}', content: '{content}' }
                                properties:
                                    data: { type: object, example: { user_id: '{user-id}', post_id: '{post-id}', content: '{content}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when post not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { content: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { content: ['{validation-error-message}'] } }
            tags:
                - '05. Comments'
            requestBody:
                required: false
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    description: 'The content of the comment.'
                                    example: commentTest
                                images:
                                    type: array
                                    description: 'The images of the comment.'
                                    example: [null, null]
                                    items: { type: file }
        parameters:
            -
                in: path
                name: post
                description: 'The id of the post.'
                example: 109
                required: true
                schema:
                    type: integer
    '/api/posts/{post}/comments/{comment}':
        get:
            summary: 'Display the specified comment.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comment displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: '{user-id}', post_id: '{post-id}', content: '{content}' }
                                properties:
                                    data: { type: object, example: { user_id: '{user-id}', post_id: '{post-id}', content: '{content}' } }
                404:
                    description: '404, when comment not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Comment(ID:{comment-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Comment(ID:{comment-id}) is not found.' }
            tags:
                - '05. Comments'
            security: []
        put:
            summary: 'Update the specified comment in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: multipart/form-data
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comment updated.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: '{user-id}', post_id: '{post-id}', content: '{content}' }
                                properties:
                                    data: { type: object, example: { user_id: '{user-id}', post_id: '{post-id}', content: '{content}' } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when comment not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Comment(ID:{comment-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Comment(ID:{comment-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { content: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { content: ['{validation-error-message}'] } }
            tags:
                - '05. Comments'
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    description: 'The content of the comment.'
                                    example: 0724Comment
                                images:
                                    type: array
                                    description: 'The images of the comment.'
                                    example: [null, null]
                                    items: { type: file }
                                _method:
                                    type: string
                                    description: 'Required if the <code><b>images</b></code> of the comment are uploaded, must be <b>PUT</b> and request method must be <small class="badge badge-black">POST</small>.'
                                    example: PUT
                            required:
                                - content
        delete:
            summary: 'Remove the specified comment from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comment deleted.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Success
                                properties:
                                    data: { type: string, example: Success }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when comment not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Comment(ID:{comment-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Comment(ID:{comment-id}) is not found.' }
            tags:
                - '05. Comments'
        parameters:
            -
                in: path
                name: post
                description: 'The id of the post.'
                example: 109
                required: true
                schema:
                    type: integer
            -
                in: path
                name: comment
                description: 'The id of the comment.'
                example: 33
                required: true
                schema:
                    type: integer
    /api/cities:
        get:
            summary: 'Display a listing of the cities.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when cities displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ id: '{city-id}', created_at: '{city-created-at}', updated_at: '{city-updated-at}', city: '{city-city}' }]
                                properties:
                                    data: { type: array, example: [{ id: '{city-id}', created_at: '{city-created-at}', updated_at: '{city-updated-at}', city: '{city-city}' }], items: { type: object } }
            tags:
                - '06. Cities'
            security: []
    '/api/cities/{city}':
        get:
            summary: 'Display the specified city.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when city displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { id: '{city-id}', created_at: '{city-created-at}', updated_at: '{city-updated-at}', city: '{city-city}', city_areas: [{ id: '{city-area-id}', created_at: '{city-area-created-at}', updated_at: '{city-area-updated-at}', city_id: '{city-area-city-id}', city_area: '{city-area-city-area}', zip_code: '{city-area-zip-code}' }] }
                                properties:
                                    data: { type: object, example: { id: '{city-id}', created_at: '{city-created-at}', updated_at: '{city-updated-at}', city: '{city-city}', city_areas: [{ id: '{city-area-id}', created_at: '{city-area-created-at}', updated_at: '{city-area-updated-at}', city_id: '{city-area-city-id}', city_area: '{city-area-city-area}', zip_code: '{city-area-zip-code}' }] } }
                404:
                    description: '404, when city not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'City(ID:{city-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'City(ID:{city-id}) is not found.' }
            tags:
                - '06. Cities'
            security: []
        parameters:
            -
                in: path
                name: city
                description: 'The id of the city.'
                example: 20
                required: true
                schema:
                    type: integer
