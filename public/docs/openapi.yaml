openapi: 3.0.3
info:
    title: 'OnesBlog API Documentation'
    description: ''
    version: 1.0.0
servers:
    -
        url: 'http://ones-blog-api.test'
paths:
    /api/register:
        post:
            summary: 'Register a user with a personal access token for the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when registration succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: Han, email: han@gmail.com, token: null }
                                properties:
                                    data: { type: object, example: { name: Han, email: han@gmail.com, token: null } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: ['{validation-error-message}'], email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { name: ['{validation-error-message}'], email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] } }
            tags:
                - '01. Authentication and User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the user.'
                                    example: Han
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: han@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '123456'
                                device_name:
                                    type: string
                                    description: 'The device name of the user.'
                                    example: iPhone
                            required:
                                - name
                                - email
                                - password
                                - device_name
            security: []
    /api/verifyCode:
        post:
            summary: 'Verify a user with a code.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when verify succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: han, email: hanTest@gmail.com, token: null }
                                properties:
                                    data: { type: object, example: { name: han, email: hanTest@gmail.com, token: null } }
                422:
                    description: '422, when verify incorrect.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: ['The code is incorrect.']
                                properties:
                                    data: { type: array, example: ['The code is incorrect.'], items: { type: string } }
            tags:
                - '01. Authentication and User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: hanTest@gmail.com
                                code:
                                    type: string
                                    description: 'The code of the user.'
                                    example: VYB6P9
                            required:
                                - email
                                - code
            security: []
    /api/login:
        post:
            summary: 'Login a user with a new personal access token for the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when login succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: Han, email: han@gmail.com, token: '{personal-access-token}' }
                                properties:
                                    data: { type: object, example: { name: Han, email: han@gmail.com, token: '{personal-access-token}' } }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { email: ['{validation-error-message}'], password: ['{validation-error-message}'], device_name: ['{validation-error-message}'] } }
            tags:
                - '01. Authentication and User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: han@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '123456'
                                device_name:
                                    type: string
                                    description: 'The device name of the user.'
                                    example: iPhone
                            required:
                                - email
                                - password
                                - device_name
            security: []
    '/api/users/{user}':
        put:
            summary: 'Update the specified user in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when user''s information updated.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: HanHan, email: han@gmail.com, token: null }
                                properties:
                                    data: { type: object, example: { name: HanHan, email: han@gmail.com, token: null } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when user not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'User(ID:{user-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'User(ID:{user-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { password: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { password: ['{validation-error-message}'] } }
            tags:
                - '01. Authentication and User'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    description: 'The name of the user.'
                                    example: Han
                                email:
                                    type: string
                                    description: 'The email of the user.'
                                    example: han@gmail.com
                                password:
                                    type: string
                                    description: 'The password of the user.'
                                    example: '1234567890'
        parameters:
            -
                in: path
                name: user
                description: 'The id of the user.'
                example: 34
                required: true
                schema:
                    type: integer
    /api/logout:
        post:
            summary: 'Logout a user with all the personal access tokens being revoked on the device.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when logout succeeded.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { name: Han, email: han@gmail.com, token: null }
                                properties:
                                    data: { type: object, example: { name: Han, email: han@gmail.com, token: null } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
            tags:
                - '01. Authentication and User'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                device_name:
                                    type: string
                                    description: 'The device''s name of the user.'
                                    example: iPhone
                            required:
                                - device_name
    /api/posts:
        get:
            summary: 'Display a listing of the posts.'
            description: ''
            parameters:
                -
                    in: query
                    name: category_id
                    description: 'The id of the category.'
                    example: 2
                    required: false
                    schema:
                        type: integer
                        description: 'The id of the category.'
                        example: 2
                -
                    in: query
                    name: limit
                    description: 'The amount of results per page. Defaults to ''10''.'
                    example: 10
                    required: false
                    schema:
                        type: integer
                        description: 'The amount of results per page. Defaults to ''10''.'
                        example: 10
                -
                    in: query
                    name: page
                    description: 'The page of the results. Defaults to ''1''.'
                    example: 1
                    required: false
                    schema:
                        type: integer
                        description: 'The page of the results. Defaults to ''1''.'
                        example: 1
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when posts displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Tenetur dignissimos nostrum ad. Et numquam qui tenetur esse ut omnis consequatur. Soluta et esse cumque. Illum eos deleniti alias iure vel eos.', content: 'Mollitia consequatur alias accusamus a rem. Explic...', published_at: '2022-05-05 17:57:31', slug: tenetur-dignissimos-nostrum-ad-et-numquam-qui-tenetur-esse-ut-omnis-consequatur-soluta-et-esse-cumque-illum-eos-deleniti-alias-iure-vel-eos }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Cumque doloremque repudiandae occaecati alias autem. Et velit rerum recusandae illum unde cupiditate est.', content: 'Ut sed eum odit distinctio aut. Rem id fugit conse...', published_at: '2022-05-17 07:04:48', slug: cumque-doloremque-repudiandae-occaecati-alias-autem-et-velit-rerum-recusandae-illum-unde-cupiditate-est }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 3, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T14:43:09.000000Z', name: 酈霖銘, email: ilu@example.com, email_verified_at: '2022-05-23T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Officia omnis commodi quia adipisci eos. Quaerat quam maiores atque dolorem beatae omnis odio. Inventore quidem ut magnam pariatur alias ut ipsa. Aperiam in ratione libero expedita omnis nulla.', content: 'Reiciendis et laborum quia eaque. Dolorem et ducim...', published_at: '2022-04-29 01:24:19', slug: officia-omnis-commodi-quia-adipisci-eos-quaerat-quam-maiores-atque-dolorem-beatae-omnis-odio-inventore-quidem-ut-magnam-pariatur-alias-ut-ipsa-aperiam-in-ratione-libero-expedita-omnis-nulla }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 3, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T14:43:09.000000Z', name: 酈霖銘, email: ilu@example.com, email_verified_at: '2022-05-23T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Deleniti culpa optio autem vel. Aut explicabo qui sint rerum ea natus inventore. Est omnis vel omnis sed voluptatem a deleniti. Culpa aut ut illum voluptatem voluptatum nobis.', content: 'Consequatur aliquam iste magnam quisquam consequat...', published_at: '2022-04-25 20:13:56', slug: deleniti-culpa-optio-autem-vel-aut-explicabo-qui-sint-rerum-ea-natus-inventore-est-omnis-vel-omnis-sed-voluptatem-a-deleniti-culpa-aut-ut-illum-voluptatem-voluptatum-nobis }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Non voluptatem laudantium officia id porro est. Officiis officiis tempore nemo qui. Ut et qui est accusamus minima.', content: 'Sed voluptatem praesentium autem omnis quo sunt pe...', published_at: '2022-05-16 10:12:50', slug: non-voluptatem-laudantium-officia-id-porro-est-officiis-officiis-tempore-nemo-qui-ut-et-qui-est-accusamus-minima }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 3, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T14:43:09.000000Z', name: 酈霖銘, email: ilu@example.com, email_verified_at: '2022-05-23T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Et explicabo ut deleniti et nemo illo. Maxime ut nihil deleniti vitae porro. Quas voluptatem sint labore numquam aut sed.', content: 'Dicta quia ut distinctio velit ipsum placeat ipsum...', published_at: '2022-05-18 07:50:07', slug: et-explicabo-ut-deleniti-et-nemo-illo-maxime-ut-nihil-deleniti-vitae-porro-quas-voluptatem-sint-labore-numquam-aut-sed }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Autem odio consequuntur ut architecto placeat enim. Et adipisci eligendi ut fuga debitis qui dicta. Fugiat eveniet adipisci aut ut.', content: 'Qui asperiores consequatur harum aliquam rerum. Cu...', published_at: '2022-05-14 01:54:51', slug: autem-odio-consequuntur-ut-architecto-placeat-enim-et-adipisci-eligendi-ut-fuga-debitis-qui-dicta-fugiat-eveniet-adipisci-aut-ut }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 1, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-24T14:11:09.000000Z', name: 計廷, email: zsong@example.org, email_verified_at: '2022-05-17T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 2, category_id: 2, title: 'Qui dolor alias voluptas consequatur. Facere sunt nostrum alias illum id itaque odio laboriosam. Neque eum officiis molestias mollitia est rerum.', content: 'Qui sunt aut excepturi dolor. Molestias nihil numq...', published_at: '2022-04-25 00:17:38', slug: qui-dolor-alias-voluptas-consequatur-facere-sunt-nostrum-alias-illum-id-itaque-odio-laboriosam-neque-eum-officiis-molestias-mollitia-est-rerum }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 2, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 羊舌偉, email: yujia.ru@example.net, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 1, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Pariatur veritatis at nam quam ut aut aut. Nam iure vitae consequuntur architecto illum. Labore sed eaque hic id officiis accusamus cupiditate.', content: 'Eveniet voluptatem hic possimus possimus quo assum...', published_at: '2022-05-04 07:17:12', slug: pariatur-veritatis-at-nam-quam-ut-aut-aut-nam-iure-vitae-consequuntur-architecto-illum-labore-sed-eaque-hic-id-officiis-accusamus-cupiditate }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 2, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 羊舌偉, email: yujia.ru@example.net, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 1, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Magni magnam minus aspernatur. Beatae natus in sit soluta similique aut ea. Et consequatur quos quod eius beatae magnam. Magni voluptates deserunt reprehenderit et ab laboriosam.', content: 'Inventore qui quisquam qui laudantium accusantium....', published_at: '2022-04-27 07:05:38', slug: magni-magnam-minus-aspernatur-beatae-natus-in-sit-soluta-similique-aut-ea-et-consequatur-quos-quod-eius-beatae-magnam-magni-voluptates-deserunt-reprehenderit-et-ab-laboriosam }]
                                    links: { first: 'http://ones-blog-api.test/api/posts?category_id=2&page=1', last: 'http://ones-blog-api.test/api/posts?category_id=2&page=2', prev: null, next: 'http://ones-blog-api.test/api/posts?category_id=2&page=2' }
                                    meta: { current_page: 1, from: 1, last_page: 2, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/posts?category_id=2&page=1', label: '1', active: true }, { url: 'http://ones-blog-api.test/api/posts?category_id=2&page=2', label: '2', active: false }, { url: 'http://ones-blog-api.test/api/posts?category_id=2&page=2', label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/posts', per_page: 10, to: 10, total: 16 }
                                properties:
                                    data: { type: array, example: [{ created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Tenetur dignissimos nostrum ad. Et numquam qui tenetur esse ut omnis consequatur. Soluta et esse cumque. Illum eos deleniti alias iure vel eos.', content: 'Mollitia consequatur alias accusamus a rem. Explic...', published_at: '2022-05-05 17:57:31', slug: tenetur-dignissimos-nostrum-ad-et-numquam-qui-tenetur-esse-ut-omnis-consequatur-soluta-et-esse-cumque-illum-eos-deleniti-alias-iure-vel-eos }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Cumque doloremque repudiandae occaecati alias autem. Et velit rerum recusandae illum unde cupiditate est.', content: 'Ut sed eum odit distinctio aut. Rem id fugit conse...', published_at: '2022-05-17 07:04:48', slug: cumque-doloremque-repudiandae-occaecati-alias-autem-et-velit-rerum-recusandae-illum-unde-cupiditate-est }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 3, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T14:43:09.000000Z', name: 酈霖銘, email: ilu@example.com, email_verified_at: '2022-05-23T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Officia omnis commodi quia adipisci eos. Quaerat quam maiores atque dolorem beatae omnis odio. Inventore quidem ut magnam pariatur alias ut ipsa. Aperiam in ratione libero expedita omnis nulla.', content: 'Reiciendis et laborum quia eaque. Dolorem et ducim...', published_at: '2022-04-29 01:24:19', slug: officia-omnis-commodi-quia-adipisci-eos-quaerat-quam-maiores-atque-dolorem-beatae-omnis-odio-inventore-quidem-ut-magnam-pariatur-alias-ut-ipsa-aperiam-in-ratione-libero-expedita-omnis-nulla }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 3, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T14:43:09.000000Z', name: 酈霖銘, email: ilu@example.com, email_verified_at: '2022-05-23T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Deleniti culpa optio autem vel. Aut explicabo qui sint rerum ea natus inventore. Est omnis vel omnis sed voluptatem a deleniti. Culpa aut ut illum voluptatem voluptatum nobis.', content: 'Consequatur aliquam iste magnam quisquam consequat...', published_at: '2022-04-25 20:13:56', slug: deleniti-culpa-optio-autem-vel-aut-explicabo-qui-sint-rerum-ea-natus-inventore-est-omnis-vel-omnis-sed-voluptatem-a-deleniti-culpa-aut-ut-illum-voluptatem-voluptatum-nobis }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Non voluptatem laudantium officia id porro est. Officiis officiis tempore nemo qui. Ut et qui est accusamus minima.', content: 'Sed voluptatem praesentium autem omnis quo sunt pe...', published_at: '2022-05-16 10:12:50', slug: non-voluptatem-laudantium-officia-id-porro-est-officiis-officiis-tempore-nemo-qui-ut-et-qui-est-accusamus-minima }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 3, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T14:43:09.000000Z', name: 酈霖銘, email: ilu@example.com, email_verified_at: '2022-05-23T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Et explicabo ut deleniti et nemo illo. Maxime ut nihil deleniti vitae porro. Quas voluptatem sint labore numquam aut sed.', content: 'Dicta quia ut distinctio velit ipsum placeat ipsum...', published_at: '2022-05-18 07:50:07', slug: et-explicabo-ut-deleniti-et-nemo-illo-maxime-ut-nihil-deleniti-vitae-porro-quas-voluptatem-sint-labore-numquam-aut-sed }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 5, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 冷傑, email: jgan@example.org, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Autem odio consequuntur ut architecto placeat enim. Et adipisci eligendi ut fuga debitis qui dicta. Fugiat eveniet adipisci aut ut.', content: 'Qui asperiores consequatur harum aliquam rerum. Cu...', published_at: '2022-05-14 01:54:51', slug: autem-odio-consequuntur-ut-architecto-placeat-enim-et-adipisci-eligendi-ut-fuga-debitis-qui-dicta-fugiat-eveniet-adipisci-aut-ut }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 1, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-24T14:11:09.000000Z', name: 計廷, email: zsong@example.org, email_verified_at: '2022-05-17T04:29:46.000000Z', is_store: 0, login_type_id: 1 }, store_id: 2, category_id: 2, title: 'Qui dolor alias voluptas consequatur. Facere sunt nostrum alias illum id itaque odio laboriosam. Neque eum officiis molestias mollitia est rerum.', content: 'Qui sunt aut excepturi dolor. Molestias nihil numq...', published_at: '2022-04-25 00:17:38', slug: qui-dolor-alias-voluptas-consequatur-facere-sunt-nostrum-alias-illum-id-itaque-odio-laboriosam-neque-eum-officiis-molestias-mollitia-est-rerum }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 2, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 羊舌偉, email: yujia.ru@example.net, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 1, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Pariatur veritatis at nam quam ut aut aut. Nam iure vitae consequuntur architecto illum. Labore sed eaque hic id officiis accusamus cupiditate.', content: 'Eveniet voluptatem hic possimus possimus quo assum...', published_at: '2022-05-04 07:17:12', slug: pariatur-veritatis-at-nam-quam-ut-aut-aut-nam-iure-vitae-consequuntur-architecto-illum-labore-sed-eaque-hic-id-officiis-accusamus-cupiditate }, { created_at: '2022-05-23T12:29:46.000000Z', user: { id: 2, created_at: '2022-05-23T12:29:46.000000Z', updated_at: '2022-05-23T12:29:46.000000Z', name: 羊舌偉, email: yujia.ru@example.net, email_verified_at: '2022-05-23T12:29:46.000000Z', is_store: 1, login_type_id: 1 }, store_id: 1, category_id: 2, title: 'Magni magnam minus aspernatur. Beatae natus in sit soluta similique aut ea. Et consequatur quos quod eius beatae magnam. Magni voluptates deserunt reprehenderit et ab laboriosam.', content: 'Inventore qui quisquam qui laudantium accusantium....', published_at: '2022-04-27 07:05:38', slug: magni-magnam-minus-aspernatur-beatae-natus-in-sit-soluta-similique-aut-ea-et-consequatur-quos-quod-eius-beatae-magnam-magni-voluptates-deserunt-reprehenderit-et-ab-laboriosam }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://ones-blog-api.test/api/posts?category_id=2&page=1', last: 'http://ones-blog-api.test/api/posts?category_id=2&page=2', prev: null, next: 'http://ones-blog-api.test/api/posts?category_id=2&page=2' } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 2, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/posts?category_id=2&page=1', label: '1', active: true }, { url: 'http://ones-blog-api.test/api/posts?category_id=2&page=2', label: '2', active: false }, { url: 'http://ones-blog-api.test/api/posts?category_id=2&page=2', label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/posts', per_page: 10, to: 10, total: 16 } }
            tags:
                - '02. Posts'
            security: []
        post:
            summary: 'Store a newly created post in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when post created.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { created_at: '2022-07-23T08:29:28.000000Z', user: { id: 34, created_at: '2022-07-18T06:56:38.000000Z', updated_at: '2022-07-18T15:02:00.000000Z', name: Han, email: han@gmail.com, email_verified_at: '2022-07-18T06:57:03.000000Z', is_store: 0, login_type_id: 1 }, store_id: 6, category_id: 1, title: Post, content: Test, published_at: null, slug: post }
                                properties:
                                    data: { type: object, example: { created_at: '2022-07-23T08:29:28.000000Z', user: { id: 34, created_at: '2022-07-18T06:56:38.000000Z', updated_at: '2022-07-18T15:02:00.000000Z', name: Han, email: han@gmail.com, email_verified_at: '2022-07-18T06:57:03.000000Z', is_store: 0, login_type_id: 1 }, store_id: 6, category_id: 1, title: Post, content: Test, published_at: null, slug: post } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: ['{validation-error-message}'], store_id: ['{validation-error-message}'], category_id: ['{validation-error-message}'], title: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { user_id: ['{validation-error-message}'], store_id: ['{validation-error-message}'], category_id: ['{validation-error-message}'], title: ['{validation-error-message}'] } }
            tags:
                - '02. Posts'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                store_id:
                                    type: integer
                                    description: 'The store of the post.'
                                    example: 6
                                category_id:
                                    type: integer
                                    description: 'The category of the post.'
                                    example: 1
                                title:
                                    type: string
                                    description: 'The title of the post.'
                                    example: Post
                                content:
                                    type: string
                                    description: 'The content of the post.'
                                    example: Test
                                published_at:
                                    type: string
                                    description: 'The published time of the post.'
                                    example: '2022-07-23T08:31:45.000000Z'
                                active:
                                    type: boolean
                                    description: 'The state of the post.'
                                    example: true
                            required:
                                - store_id
                                - category_id
                                - title
    '/api/posts/{post}':
        get:
            summary: 'Display the specified post.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when post displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { created_at: '2022-07-18T06:58:02.000000Z', user: { id: 34, created_at: '2022-07-18T06:56:38.000000Z', updated_at: '2022-07-18T06:57:03.000000Z', name: Han, email: han@gmail.com, email_verified_at: '2022-07-18T06:57:03.000000Z', is_store: 0, login_type_id: 1 }, store_id: 6, category_id: 2, title: post, content: test, published_at: null, slug: post }
                                properties:
                                    data: { type: object, example: { created_at: '2022-07-18T06:58:02.000000Z', user: { id: 34, created_at: '2022-07-18T06:56:38.000000Z', updated_at: '2022-07-18T06:57:03.000000Z', name: Han, email: han@gmail.com, email_verified_at: '2022-07-18T06:57:03.000000Z', is_store: 0, login_type_id: 1 }, store_id: 6, category_id: 2, title: post, content: test, published_at: null, slug: post } }
                404:
                    description: '404, when post not found, inactive or unpublished.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
            tags:
                - '02. Posts'
            security: []
        put:
            summary: 'Update the specified post in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when post updated.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { created_at: '2022-07-23T08:31:45.000000Z', user: { id: 34, created_at: '2022-07-18T06:56:38.000000Z', updated_at: '2022-07-18T15:02:00.000000Z', name: Han, email: han@gmail.com, email_verified_at: '2022-07-18T06:57:03.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 3, title: 0724Post, content: 0724Test, published_at: '2022-07-24 00:00:00', slug: 0724post }
                                properties:
                                    data: { type: object, example: { created_at: '2022-07-23T08:31:45.000000Z', user: { id: 34, created_at: '2022-07-18T06:56:38.000000Z', updated_at: '2022-07-18T15:02:00.000000Z', name: Han, email: han@gmail.com, email_verified_at: '2022-07-18T06:57:03.000000Z', is_store: 0, login_type_id: 1 }, store_id: 1, category_id: 3, title: 0724Post, content: 0724Test, published_at: '2022-07-24 00:00:00', slug: 0724post } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when post not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { category_id: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { category_id: ['{validation-error-message}'] } }
            tags:
                - '02. Posts'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                category_id:
                                    type: integer
                                    description: 'The category of the post.'
                                    example: 3
                                title:
                                    type: string
                                    description: 'The title of the post.'
                                    example: 0724Post
                                content:
                                    type: string
                                    description: 'The content of the post.'
                                    example: 0724Test
                                published_at:
                                    type: string
                                    description: 'The published time of the post.'
                                    example: '20220724'
                                active:
                                    type: boolean
                                    description: 'The state of the post.'
                                    example: true
        delete:
            summary: 'Remove the specified post from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when post deleted.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Success
                                properties:
                                    data: { type: string, example: Success }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when post not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
            tags:
                - '02. Posts'
        parameters:
            -
                in: path
                name: post
                description: 'The id of the post.'
                example: 108
                required: true
                schema:
                    type: integer
    '/api/posts/{post}/comments':
        get:
            summary: 'Display a listing of the comments.'
            description: ''
            parameters:
                -
                    in: query
                    name: limit
                    description: 'The amount of results per page.'
                    example: 10
                    required: false
                    schema:
                        type: integer
                        description: 'The amount of results per page.'
                        example: 10
                -
                    in: query
                    name: page
                    description: 'The page of the results.'
                    example: 1
                    required: false
                    schema:
                        type: integer
                        description: 'The page of the results.'
                        example: 1
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comments displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: [{ user_id: 34, post_id: 109, content: commentTest }, { user_id: 34, post_id: 109, content: Test }, { user_id: 34, post_id: 109, content: TestTest }]
                                    links: { first: 'http://ones-blog-api.test/api/posts/109/comments?page=1', last: 'http://ones-blog-api.test/api/posts/109/comments?page=1', prev: null, next: null }
                                    meta: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/posts/109/comments?page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/posts/109/comments', per_page: 10, to: 3, total: 3 }
                                properties:
                                    data: { type: array, example: [{ user_id: 34, post_id: 109, content: commentTest }, { user_id: 34, post_id: 109, content: Test }, { user_id: 34, post_id: 109, content: TestTest }], items: { type: object } }
                                    links: { type: object, example: { first: 'http://ones-blog-api.test/api/posts/109/comments?page=1', last: 'http://ones-blog-api.test/api/posts/109/comments?page=1', prev: null, next: null } }
                                    meta: { type: object, example: { current_page: 1, from: 1, last_page: 1, links: [{ url: null, label: pagination.previous, active: false }, { url: 'http://ones-blog-api.test/api/posts/109/comments?page=1', label: '1', active: true }, { url: null, label: pagination.next, active: false }], path: 'http://ones-blog-api.test/api/posts/109/comments', per_page: 10, to: 3, total: 3 } }
            tags:
                - '03. Comments'
            security: []
        post:
            summary: 'Store a newly created comment in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                201:
                    description: '201, when comment created.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: 34, post_id: 109, content: commentTest }
                                properties:
                                    data: { type: object, example: { user_id: 34, post_id: 109, content: commentTest } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when post not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Post(ID:{post-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Post(ID:{post-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { content: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { content: ['{validation-error-message}'] } }
            tags:
                - '03. Comments'
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    description: 'The content of the comment.'
                                    example: commentTest
        parameters:
            -
                in: path
                name: post
                description: 'The id of the post.'
                example: 109
                required: true
                schema:
                    type: integer
    '/api/posts/{post}/comments/{comment}':
        get:
            summary: 'Display the specified comment.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comment displayed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: 34, post_id: 109, content: TestTest }
                                properties:
                                    data: { type: object, example: { user_id: 34, post_id: 109, content: TestTest } }
                404:
                    description: '404, when comment not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Comment(ID:{comment-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Comment(ID:{comment-id}) is not found.' }
            tags:
                - '03. Comments'
            security: []
        put:
            summary: 'Update the specified comment in storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comment updated.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { user_id: 34, post_id: 109, content: 0724Comment }
                                properties:
                                    data: { type: object, example: { user_id: 34, post_id: 109, content: 0724Comment } }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when comment not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Comment(ID:{comment-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Comment(ID:{comment-id}) is not found.' }
                422:
                    description: '422, when any validation failed.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: { content: ['{validation-error-message}'] }
                                properties:
                                    data: { type: object, example: { content: ['{validation-error-message}'] } }
            tags:
                - '03. Comments'
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                content:
                                    type: string
                                    description: 'The content of the comment.'
                                    example: 0724Comment
                            required:
                                - content
        delete:
            summary: 'Remove the specified comment from storage.'
            description: ''
            parameters:
                -
                    in: header
                    name: Content-Type
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: Accept
                    description: ''
                    example: application/json
                    schema:
                        type: string
                -
                    in: header
                    name: token
                    description: ''
                    example: 'Bearer {personal-access-token}'
                    schema:
                        type: string
            responses:
                200:
                    description: '200, when comment deleted.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Success
                                properties:
                                    data: { type: string, example: Success }
                401:
                    description: '401, without personal access token.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: Unauthenticated.
                                properties:
                                    data: { type: string, example: Unauthenticated. }
                404:
                    description: '404, when comment not found.'
                    content:
                        application/json:
                            schema:
                                type: object
                                example:
                                    data: 'Comment(ID:{comment-id}) is not found.'
                                properties:
                                    data: { type: string, example: 'Comment(ID:{comment-id}) is not found.' }
            tags:
                - '03. Comments'
        parameters:
            -
                in: path
                name: post
                description: 'The id of the post.'
                example: 109
                required: true
                schema:
                    type: integer
            -
                in: path
                name: comment
                description: 'The id of the comment.'
                example: 33
                required: true
                schema:
                    type: integer
